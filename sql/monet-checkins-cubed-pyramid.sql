-- We probably have to introduce several types of pyramid dimensions.
-- In an example below we have one "two dimensional" space dimensional and
--  one time dimension.

DROP TABLE CUBED_PYRAMID CASCADE;

/*
 * Initialize pyramid by removing "duplicates".
 */

CREATE TABLE CUBED_PYRAMID AS
SELECT
      0 AS SPACE_LAYER, -- This is not a base space layer
      0 AS TIME_LAYER, -- This is not a base time layer
      CAST((LONGITUDE - (SELECT MIN(LONGITUDE) FROM CHECKINS))* 1000000000 AS BIGINT) AS TILE_X,
      CAST((LATITUDE - (SELECT MIN(LATITUDE) FROM CHECKINS)) * 1000000000 AS BIGINT) AS TILE_Y,
      S AS TIME,
      COUNT(USER_ID) AS CNT
   FROM
      CH2 -- checkins table with auxiliary column S -- seconds
   GROUP BY
      LONGITUDE,
      LATITUDE,
      S -- TIME
   WITH DATA;

-- ------------------------------------------------------------------------------------------

/*
 * Returns a size of a "spatial" base tile.
 */
DROP FUNCTION GET_BASE_TILE_SIZE CASCADE;
CREATE FUNCTION GET_BASE_TILE_SIZE()
RETURNS FLOAT
BEGIN
   DECLARE MAX_X BIGINT;
   DECLARE MIN_X BIGINT;
   DECLARE BASE_TILE_SIZE FLOAT;

   SELECT MAX(TILE_X) INTO MAX_X FROM CUBED_PYRAMID WHERE SPACE_LAYER=0;
   SELECT MIN(TILE_X) INTO MIN_X FROM CUBED_PYRAMID WHERE SPACE_LAYER=0;
   SET BASE_TILE_SIZE = (MAX_X - MIN_X) / 512;

   RETURN BASE_TILE_SIZE;
END;

-- ------------------------------------------------------------------------------------------

DROP FUNCTION CREATE_BASE_LAYER CASCADE;

/*
 * Creates a first/base layer of the pyramid - here base layer is denoted by 1.
 * Returns a number of tuples in the first layer.
 */
CREATE FUNCTION CREATE_BASE_LAYER()
RETURNS INTEGER
BEGIN
   DECLARE RESULT BIGINT;
   DECLARE BASE_TILE_SIZE2 FLOAT;
   SET BASE_TILE_SIZE2 = GET_BASE_TILE_SIZE();  -- initial tiling
   DECLARE BASE_TIME_INTERVAL INTEGER;
   SET BASE_TIME_INTERVAL = 3600;               --

   INSERT INTO CUBED_PYRAMID
      SELECT
         1,
         1,
         CAST(TILE_X / BASE_TILE_SIZE2 AS BIGINT) AS TILE_X_GROUP,
         CAST(TILE_Y / BASE_TILE_SIZE2 AS BIGINT) AS TILE_Y_GROUP,
         CAST(TIME / BASE_TIME_INTERVAL AS INTEGER) AS TIME_GROUP,
         SUM(CNT) AS CNT
      FROM
         CUBED_PYRAMID
      WHERE
         SPACE_LAYER = 0 AND
         TIME_LAYER = 0
      GROUP BY
         TILE_X_GROUP,
         TILE_Y_GROUP,
         TIME_GROUP;

   SELECT COUNT(*) INTO RESULT FROM CUBED_PYRAMID WHERE SPACE_LAYER = 0;

   RETURN RESULT;
END;

-- ------------------------------------------------------------------------------------------

DROP FUNCTION CREATE_SPACE_LAYER CASCADE;

/*
 * Creates a spatial layer of the pyramid.
 */
CREATE FUNCTION CREATE_SPACE_LAYER(SPACE_LAYER_NUM INT)
RETURNS INTEGER
BEGIN
   DECLARE RESULT BIGINT;

   INSERT INTO CUBED_PYRAMID
      SELECT
         SPACE_LAYER_NUM,
         1,
         CAST(TILE_X / 2 AS BIGINT) AS TILE_X_GROUP,
         CAST(TILE_Y / 2 AS BIGINT) AS TILE_Y_GROUP,
         TIME AS TIME_GROUP,
         SUM(CNT) AS CNT
      FROM
         CUBED_PYRAMID
      WHERE
         SPACE_LAYER = SPACE_LAYER_NUM - 1 AND
         TIME_LAYER = 1
      GROUP BY
         TILE_X_GROUP,
         TILE_Y_GROUP,
         TIME_GROUP;

   SELECT COUNT(*) INTO RESULT FROM CUBED_PYRAMID WHERE SPACE_LAYER = SPACE_LAYER_NUM AND TIME_LAYER = 1;

   RETURN RESULT;
END;

-- ------------------------------------------------------------------------------------------

DROP FUNCTION CREATE_TIME_LAYER CASCADE;

CREATE FUNCTION CREATE_TIME_LAYER(SPACE_LAYER_NUM INT, TIME_LAYER_NUM INT)
RETURNS INTEGER
BEGIN
DECLARE RESULT BIGINT;

INSERT INTO CUBED_PYRAMID
        SELECT
                SPACE_LAYER_NUM,
                TIME_LAYER_NUM,
                TILE_X AS TILE_X_GROUP,
                TILE_Y AS TILE_Y_GROUP,
                CAST(TIME / 2 AS INTEGER) AS TIME_GROUP,
                SUM(CNT) AS CNT
        FROM
                CUBED_PYRAMID
        WHERE
                SPACE_LAYER = SPACE_LAYER_NUM AND
                TIME_LAYER = TIME_LAYER_NUM - 1
        GROUP BY
                TILE_X_GROUP,
                TILE_Y_GROUP,
                TIME_GROUP;

        SELECT COUNT(*) INTO RESULT FROM CUBED_PYRAMID WHERE SPACE_LAYER = SPACE_LAYER_NUM AND TIME_LAYER = TIME_LAYER_NUM;

    RETURN RESULT;
END;

-- ----------------------------------------------------------------------------------------------------


-- LAYER 1
SELECT CREATE_BASE_LAYER(); -- 15 seconds
SELECT CREATE_TIME_LAYER(1, 2);
SELECT CREATE_TIME_LAYER(1, 3);
SELECT CREATE_TIME_LAYER(1, 4);
SELECT CREATE_TIME_LAYER(1, 5);
SELECT CREATE_TIME_LAYER(1, 6);
SELECT CREATE_TIME_LAYER(1, 7);
SELECT CREATE_TIME_LAYER(1, 8);
SELECT CREATE_TIME_LAYER(1, 9);
SELECT CREATE_TIME_LAYER(1, 10);
SELECT CREATE_TIME_LAYER(1, 11);
SELECT CREATE_TIME_LAYER(1, 12);
SELECT CREATE_TIME_LAYER(1, 13);
SELECT CREATE_TIME_LAYER(1, 14);

-- LAYER 2
SELECT CREATE_SPACE_LAYER(2);
SELECT CREATE_TIME_LAYER(2, 2);
SELECT CREATE_TIME_LAYER(2, 3);
SELECT CREATE_TIME_LAYER(2, 4);
SELECT CREATE_TIME_LAYER(2, 5);
SELECT CREATE_TIME_LAYER(2, 6);
SELECT CREATE_TIME_LAYER(2, 7);
SELECT CREATE_TIME_LAYER(2, 8);
SELECT CREATE_TIME_LAYER(2, 9);

-- LAYER 3
SELECT CREATE_SPACE_LAYER(3);
SELECT CREATE_TIME_LAYER(3, 2);
SELECT CREATE_TIME_LAYER(3, 3);
SELECT CREATE_TIME_LAYER(3, 4);
SELECT CREATE_TIME_LAYER(3, 5);
SELECT CREATE_TIME_LAYER(3, 6);
SELECT CREATE_TIME_LAYER(3, 7);

-- LAYER 4
SELECT CREATE_SPACE_LAYER(4);
SELECT CREATE_TIME_LAYER(4, 2);
SELECT CREATE_TIME_LAYER(4, 3);
SELECT CREATE_TIME_LAYER(4, 4);
SELECT CREATE_TIME_LAYER(4, 5);

-- LAYER 5
SELECT CREATE_SPACE_LAYER(5);
SELECT CREATE_TIME_LAYER(5, 2);
SELECT CREATE_TIME_LAYER(5, 3);
SELECT CREATE_TIME_LAYER(5, 4);
SELECT CREATE_TIME_LAYER(5, 5);


-- LAYER 6
SELECT CREATE_SPACE_LAYER(6);
SELECT CREATE_TIME_LAYER(6, 2);
SELECT CREATE_TIME_LAYER(6, 3);
SELECT CREATE_TIME_LAYER(6, 4);
SELECT CREATE_TIME_LAYER(6, 5);
